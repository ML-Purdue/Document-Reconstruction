Text recognition (ZD)
Blob detection (PP)
Minimizing an error function
    Sum of edges
    Gaps between pieces and overlap (CW)
Random translation and rotation of pieces (CW)
Thresholding (CW)
Strip boundaries like a jigsaw puzzle
Collision detection and sliding (RB)
Lining up text by matching discontinuous boundary points
OpenCV for Java (CW)
Generate an N-tuple for each edge and cluster them in N-space. (CC)

Pipeline:
    Load image
    Pre-processing
        Background subtraction
            User selects sample pixels in the background and then foreground
                UI will prompt the user to select sample pixels
            These sampled pixels are used to construct two convex hulls (QuickHull3D), one for the foreground and one for the background
            Set the alpha value of each pixel to the proportion of the distances to the foreground and background volumes
                determine whether a point is inside or outside of a convex hull
                calculate the distance to a convex hull
            Set the RGB value of each pixel to the closest foreground color in 3D color space
                find the closest point on a convex hull
        Alpha cleanup
            Increase the contrast of the alpha channel to remove some faint alpha noise
    Feature extraction
        Blob Detection
            We created an iterative flood fill to mark each piece as a blob.
            Each blob has its own id number, which will be used for saving.
            Requires the input image to be marked with alpha values for
            transparancy.
            Currently prints out an output image where each blob is colored
            black and empty space is white.
            Next Step: Saving each blob to its own image.  To do this, create an arraylist
            of int arrays which store the minX,minY,maxX,maxY for each blob.  Use this to
            save the blobs.
		Blob Detection done for the most part
    Small blob removal
        Remove blobs with area less than a threshold percent of the total area
    Solvers
        Error functions
            Sum of pixels of image filtered through edge detection
            Area of bounding rectangle of all pieces, plus weight times area of overlap
        Random shuffling solver
            Translate and rotate pieces randomly while keeping track of the best layout and minimizing an error function
            Slow convergeance, many false positives
    Display
